// Code generated by redis-gen. DO NOT EDIT.
// generated at 03 Nov 20 14:23 CST

package redis

import (
	"context"
	"time"

	"github.com/go-redis/redis/v8"
)

type (
	BitCount           = redis.BitCount
	BoolCmd            = redis.BoolCmd
	BoolSliceCmd       = redis.BoolSliceCmd
	ClusterSlotsCmd    = redis.ClusterSlotsCmd
	Cmd                = redis.Cmd
	Cmder              = redis.Cmder
	CommandsInfoCmd    = redis.CommandsInfoCmd
	Conn               = redis.Conn
	DurationCmd        = redis.DurationCmd
	FloatCmd           = redis.FloatCmd
	GeoLocation        = redis.GeoLocation
	GeoLocationCmd     = redis.GeoLocationCmd
	GeoPosCmd          = redis.GeoPosCmd
	GeoRadiusQuery     = redis.GeoRadiusQuery
	Hook               = redis.Hook
	IntCmd             = redis.IntCmd
	IntSliceCmd        = redis.IntSliceCmd
	Options            = redis.Options
	Pipeliner          = redis.Pipeliner
	PoolStats          = redis.PoolStats
	PubSub             = redis.PubSub
	ScanCmd            = redis.ScanCmd
	SliceCmd           = redis.SliceCmd
	SlowLogCmd         = redis.SlowLogCmd
	Sort               = redis.Sort
	StatusCmd          = redis.StatusCmd
	StringCmd          = redis.StringCmd
	StringIntMapCmd    = redis.StringIntMapCmd
	StringSliceCmd     = redis.StringSliceCmd
	StringStringMapCmd = redis.StringStringMapCmd
	StringStructMapCmd = redis.StringStructMapCmd
	TimeCmd            = redis.TimeCmd
	Tx                 = redis.Tx
	XAddArgs           = redis.XAddArgs
	XClaimArgs         = redis.XClaimArgs
	XInfoGroupsCmd     = redis.XInfoGroupsCmd
	XInfoStreamCmd     = redis.XInfoStreamCmd
	XMessageSliceCmd   = redis.XMessageSliceCmd
	XPendingCmd        = redis.XPendingCmd
	XPendingExtArgs    = redis.XPendingExtArgs
	XPendingExtCmd     = redis.XPendingExtCmd
	XReadArgs          = redis.XReadArgs
	XReadGroupArgs     = redis.XReadGroupArgs
	XStreamSliceCmd    = redis.XStreamSliceCmd
	Z                  = redis.Z
	ZRangeBy           = redis.ZRangeBy
	ZSliceCmd          = redis.ZSliceCmd
	ZStore             = redis.ZStore
	ZWithKeyCmd        = redis.ZWithKeyCmd
)

func (c *Client) AddHook(iface Hook) {

	c.load().AddHook(iface)

	return
}

func (c *Client) Append(ctx context.Context, val string, val1 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Append(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BLPop(ctx context.Context, duration time.Duration, vals ...string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BLPop(ctx, duration, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BRPop(ctx context.Context, duration time.Duration, vals ...string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BRPop(ctx, duration, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BRPopLPush(ctx context.Context, val string, val1 string, duration time.Duration) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BRPopLPush(ctx, val, val1, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BZPopMax(ctx context.Context, duration time.Duration, vals ...string) (cmd *ZWithKeyCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BZPopMax(ctx, duration, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BZPopMin(ctx context.Context, duration time.Duration, vals ...string) (cmd *ZWithKeyCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BZPopMin(ctx, duration, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BgRewriteAOF(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BgRewriteAOF(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BgSave(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BgSave(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BitCount(ctx context.Context, val string, count *BitCount) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BitCount(ctx, val, count)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BitField(ctx context.Context, val string, vals ...interface{}) (cmd *IntSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BitField(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BitOpAnd(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BitOpAnd(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BitOpNot(ctx context.Context, val string, val1 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BitOpNot(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BitOpOr(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BitOpOr(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BitOpXor(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BitOpXor(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) BitPos(ctx context.Context, val string, i int64, vals ...int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().BitPos(ctx, val, i, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientGetName(ctx context.Context) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientGetName(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientID(ctx context.Context) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientID(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientKill(ctx context.Context, val string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientKill(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientKillByFilter(ctx context.Context, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientKillByFilter(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientList(ctx context.Context) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientList(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientPause(ctx context.Context, duration time.Duration) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientPause(ctx, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientUnblock(ctx context.Context, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientUnblock(ctx, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClientUnblockWithError(ctx context.Context, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClientUnblockWithError(ctx, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Close() (err error) {

	err = c.load().Close()

	return
}

func (c *Client) ClusterAddSlots(ctx context.Context, vals ...int) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterAddSlots(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterAddSlotsRange(ctx context.Context, i int, i1 int) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterAddSlotsRange(ctx, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterCountFailureReports(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterCountFailureReports(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterCountKeysInSlot(ctx context.Context, i int) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterCountKeysInSlot(ctx, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterDelSlots(ctx context.Context, vals ...int) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterDelSlots(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterDelSlotsRange(ctx context.Context, i int, i1 int) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterDelSlotsRange(ctx, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterFailover(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterFailover(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterForget(ctx context.Context, val string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterForget(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterGetKeysInSlot(ctx context.Context, i int, i1 int) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterGetKeysInSlot(ctx, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterInfo(ctx context.Context) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterInfo(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterKeySlot(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterKeySlot(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterMeet(ctx context.Context, val string, val1 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterMeet(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterNodes(ctx context.Context) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterNodes(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterReplicate(ctx context.Context, val string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterReplicate(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterResetHard(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterResetHard(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterResetSoft(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterResetSoft(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterSaveConfig(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterSaveConfig(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterSlaves(ctx context.Context, val string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterSlaves(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ClusterSlots(ctx context.Context) (cmd *ClusterSlotsCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ClusterSlots(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Command(ctx context.Context) (cmd *CommandsInfoCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Command(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ConfigGet(ctx context.Context, val string) (cmd *SliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ConfigGet(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ConfigResetStat(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ConfigResetStat(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ConfigRewrite(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ConfigRewrite(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ConfigSet(ctx context.Context, val string, val1 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ConfigSet(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Conn(ctx context.Context) (conn *Conn) {
	if ctx == nil {
		ctx = context.Background()
	}

	conn = c.load().Conn(ctx)

	return
}

func (c *Client) Context() (iface context.Context) {

	iface = c.load().Context()

	return
}

func (c *Client) DBSize(ctx context.Context) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().DBSize(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) DebugObject(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().DebugObject(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Decr(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Decr(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) DecrBy(ctx context.Context, val string, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().DecrBy(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Del(ctx context.Context, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Del(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Do(ctx context.Context, vals ...interface{}) (cmd *Cmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Do(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Dump(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Dump(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Echo(ctx context.Context, iface interface{}) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Echo(ctx, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Eval(ctx context.Context, val string, vals []string, vals1 ...interface{}) (cmd *Cmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Eval(ctx, val, vals, vals1...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) EvalSha(ctx context.Context, val string, vals []string, vals1 ...interface{}) (cmd *Cmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().EvalSha(ctx, val, vals, vals1...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Exists(ctx context.Context, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Exists(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Expire(ctx context.Context, val string, duration time.Duration) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Expire(ctx, val, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ExpireAt(ctx context.Context, val string, t time.Time) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ExpireAt(ctx, val, t)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) FlushAll(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().FlushAll(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) FlushAllAsync(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().FlushAllAsync(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) FlushDB(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().FlushDB(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) FlushDBAsync(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().FlushDBAsync(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoAdd(ctx context.Context, val string, location ...*GeoLocation) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoAdd(ctx, val, location...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoDist(ctx context.Context, val string, val1 string, val2 string, val3 string) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoDist(ctx, val, val1, val2, val3)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoHash(ctx context.Context, val string, vals ...string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoHash(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoPos(ctx context.Context, val string, vals ...string) (cmd *GeoPosCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoPos(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoRadius(ctx context.Context, val string, f float64, f1 float64, query *GeoRadiusQuery) (cmd *GeoLocationCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoRadius(ctx, val, f, f1, query)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoRadiusByMember(ctx context.Context, val string, val1 string, query *GeoRadiusQuery) (cmd *GeoLocationCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoRadiusByMember(ctx, val, val1, query)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoRadiusByMemberStore(ctx context.Context, val string, val1 string, query *GeoRadiusQuery) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoRadiusByMemberStore(ctx, val, val1, query)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GeoRadiusStore(ctx context.Context, val string, f float64, f1 float64, query *GeoRadiusQuery) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GeoRadiusStore(ctx, val, f, f1, query)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Get(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Get(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GetBit(ctx context.Context, val string, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GetBit(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GetRange(ctx context.Context, val string, i int64, i1 int64) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GetRange(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) GetSet(ctx context.Context, val string, iface interface{}) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().GetSet(ctx, val, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HDel(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HDel(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HExists(ctx context.Context, val string, val1 string) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HExists(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HGet(ctx context.Context, val string, val1 string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HGet(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HGetAll(ctx context.Context, val string) (cmd *StringStringMapCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HGetAll(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HIncrBy(ctx context.Context, val string, val1 string, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HIncrBy(ctx, val, val1, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HIncrByFloat(ctx context.Context, val string, val1 string, f float64) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HIncrByFloat(ctx, val, val1, f)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HKeys(ctx context.Context, val string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HKeys(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HLen(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HLen(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HMGet(ctx context.Context, val string, vals ...string) (cmd *SliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HMGet(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HMSet(ctx context.Context, val string, vals ...interface{}) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HMSet(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HScan(ctx context.Context, val string, n uint64, val1 string, i int64) (cmd *ScanCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HScan(ctx, val, n, val1, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HSet(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HSet(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HSetNX(ctx context.Context, val string, val1 string, iface interface{}) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HSetNX(ctx, val, val1, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) HVals(ctx context.Context, val string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().HVals(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Incr(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Incr(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) IncrBy(ctx context.Context, val string, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().IncrBy(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) IncrByFloat(ctx context.Context, val string, f float64) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().IncrByFloat(ctx, val, f)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Info(ctx context.Context, vals ...string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Info(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Keys(ctx context.Context, val string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Keys(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LIndex(ctx context.Context, val string, i int64) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LIndex(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LInsert(ctx context.Context, val string, val1 string, iface interface{}, iface1 interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LInsert(ctx, val, val1, iface, iface1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LInsertAfter(ctx context.Context, val string, iface interface{}, iface1 interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LInsertAfter(ctx, val, iface, iface1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LInsertBefore(ctx context.Context, val string, iface interface{}, iface1 interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LInsertBefore(ctx, val, iface, iface1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LLen(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LLen(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LPop(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LPop(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LPush(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LPush(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LPushX(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LPushX(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LRange(ctx context.Context, val string, i int64, i1 int64) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LRange(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LRem(ctx context.Context, val string, i int64, iface interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LRem(ctx, val, i, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LSet(ctx context.Context, val string, i int64, iface interface{}) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LSet(ctx, val, i, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LTrim(ctx context.Context, val string, i int64, i1 int64) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LTrim(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) LastSave(ctx context.Context) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().LastSave(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) MGet(ctx context.Context, vals ...string) (cmd *SliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().MGet(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) MSet(ctx context.Context, vals ...interface{}) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().MSet(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) MSetNX(ctx context.Context, vals ...interface{}) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().MSetNX(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) MemoryUsage(ctx context.Context, val string, vals ...int) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().MemoryUsage(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Migrate(ctx context.Context, val string, val1 string, val2 string, i int, duration time.Duration) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Migrate(ctx, val, val1, val2, i, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Move(ctx context.Context, val string, i int) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Move(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ObjectEncoding(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ObjectEncoding(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ObjectIdleTime(ctx context.Context, val string) (cmd *DurationCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ObjectIdleTime(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ObjectRefCount(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ObjectRefCount(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Options() (options *Options) {

	options = c.load().Options()

	return
}

func (c *Client) PExpire(ctx context.Context, val string, duration time.Duration) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PExpire(ctx, val, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) PExpireAt(ctx context.Context, val string, t time.Time) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PExpireAt(ctx, val, t)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) PFAdd(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PFAdd(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) PFCount(ctx context.Context, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PFCount(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) PFMerge(ctx context.Context, val string, vals ...string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PFMerge(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) PSubscribe(ctx context.Context, vals ...string) (sub *PubSub) {
	if ctx == nil {
		ctx = context.Background()
	}

	sub = c.load().PSubscribe(ctx, vals...)

	return
}

func (c *Client) PTTL(ctx context.Context, val string) (cmd *DurationCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PTTL(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Persist(ctx context.Context, val string) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Persist(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Ping(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Ping(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Pipeline() (iface Pipeliner) {

	iface = c.load().Pipeline()

	return
}

func (c *Client) Pipelined(ctx context.Context, fn func(Pipeliner) error) (vals []Cmder, err error) {
	if ctx == nil {
		ctx = context.Background()
	}

	vals, err = c.load().Pipelined(ctx, fn)

	return
}

func (c *Client) PoolStats() (stats *PoolStats) {

	stats = c.load().PoolStats()

	return
}

func (c *Client) Process(ctx context.Context, iface Cmder) (err error) {
	if ctx == nil {
		ctx = context.Background()
	}

	err = c.load().Process(ctx, iface)

	return
}

func (c *Client) PubSubChannels(ctx context.Context, val string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PubSubChannels(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) PubSubNumPat(ctx context.Context) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PubSubNumPat(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) PubSubNumSub(ctx context.Context, vals ...string) (cmd *StringIntMapCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().PubSubNumSub(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Publish(ctx context.Context, val string, iface interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Publish(ctx, val, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Quit(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Quit(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) RPop(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().RPop(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) RPopLPush(ctx context.Context, val string, val1 string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().RPopLPush(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) RPush(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().RPush(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) RPushX(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().RPushX(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) RandomKey(ctx context.Context) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().RandomKey(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ReadOnly(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ReadOnly(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ReadWrite(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ReadWrite(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Rename(ctx context.Context, val string, val1 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Rename(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) RenameNX(ctx context.Context, val string, val1 string) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().RenameNX(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Restore(ctx context.Context, val string, duration time.Duration, val1 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Restore(ctx, val, duration, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) RestoreReplace(ctx context.Context, val string, duration time.Duration, val1 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().RestoreReplace(ctx, val, duration, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SAdd(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SAdd(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SCard(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SCard(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SDiff(ctx context.Context, vals ...string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SDiff(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SDiffStore(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SDiffStore(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SInter(ctx context.Context, vals ...string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SInter(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SInterStore(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SInterStore(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SIsMember(ctx context.Context, val string, iface interface{}) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SIsMember(ctx, val, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SMembers(ctx context.Context, val string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SMembers(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SMembersMap(ctx context.Context, val string) (cmd *StringStructMapCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SMembersMap(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SMove(ctx context.Context, val string, val1 string, iface interface{}) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SMove(ctx, val, val1, iface)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SPop(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SPop(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SPopN(ctx context.Context, val string, i int64) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SPopN(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SRandMember(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SRandMember(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SRandMemberN(ctx context.Context, val string, i int64) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SRandMemberN(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SRem(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SRem(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SScan(ctx context.Context, val string, n uint64, val1 string, i int64) (cmd *ScanCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SScan(ctx, val, n, val1, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SUnion(ctx context.Context, vals ...string) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SUnion(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SUnionStore(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SUnionStore(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Save(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Save(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Scan(ctx context.Context, n uint64, val string, i int64) (cmd *ScanCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Scan(ctx, n, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ScriptExists(ctx context.Context, vals ...string) (cmd *BoolSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ScriptExists(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ScriptFlush(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ScriptFlush(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ScriptKill(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ScriptKill(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ScriptLoad(ctx context.Context, val string) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ScriptLoad(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Set(ctx context.Context, val string, iface interface{}, duration time.Duration) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Set(ctx, val, iface, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SetBit(ctx context.Context, val string, i int64, i1 int) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SetBit(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SetEX(ctx context.Context, val string, iface interface{}, duration time.Duration) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SetEX(ctx, val, iface, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SetNX(ctx context.Context, val string, iface interface{}, duration time.Duration) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SetNX(ctx, val, iface, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SetRange(ctx context.Context, val string, i int64, val1 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SetRange(ctx, val, i, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SetXX(ctx context.Context, val string, iface interface{}, duration time.Duration) (cmd *BoolCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SetXX(ctx, val, iface, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Shutdown(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Shutdown(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ShutdownNoSave(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ShutdownNoSave(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ShutdownSave(ctx context.Context) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ShutdownSave(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SlaveOf(ctx context.Context, val string, val1 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SlaveOf(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SlowLogGet(ctx context.Context, i int64) (cmd *SlowLogCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SlowLogGet(ctx, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Sort(ctx context.Context, val string, sort *Sort) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Sort(ctx, val, sort)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SortInterfaces(ctx context.Context, val string, sort *Sort) (cmd *SliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SortInterfaces(ctx, val, sort)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) SortStore(ctx context.Context, val string, val1 string, sort *Sort) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().SortStore(ctx, val, val1, sort)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) StrLen(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().StrLen(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) String() (ret string) {

	ret = c.load().String()

	return
}

func (c *Client) Subscribe(ctx context.Context, vals ...string) (sub *PubSub) {
	if ctx == nil {
		ctx = context.Background()
	}

	sub = c.load().Subscribe(ctx, vals...)

	return
}

func (c *Client) Sync(ctx context.Context) {
	if ctx == nil {
		ctx = context.Background()
	}

	c.load().Sync(ctx)

	return
}

func (c *Client) TTL(ctx context.Context, val string) (cmd *DurationCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().TTL(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Time(ctx context.Context) (cmd *TimeCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Time(ctx)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Touch(ctx context.Context, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Touch(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) TxPipeline() (iface Pipeliner) {

	iface = c.load().TxPipeline()

	return
}

func (c *Client) TxPipelined(ctx context.Context, fn func(Pipeliner) error) (vals []Cmder, err error) {
	if ctx == nil {
		ctx = context.Background()
	}

	vals, err = c.load().TxPipelined(ctx, fn)

	return
}

func (c *Client) Type(ctx context.Context, val string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Type(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Unlink(ctx context.Context, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Unlink(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Wait(ctx context.Context, i int, duration time.Duration) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().Wait(ctx, i, duration)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) Watch(ctx context.Context, fn func(*Tx) error, vals ...string) (err error) {
	if ctx == nil {
		ctx = context.Background()
	}

	err = c.load().Watch(ctx, fn, vals...)

	return
}

func (c *Client) XAck(ctx context.Context, val string, val1 string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XAck(ctx, val, val1, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XAdd(ctx context.Context, args *XAddArgs) (cmd *StringCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XAdd(ctx, args)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XClaim(ctx context.Context, args *XClaimArgs) (cmd *XMessageSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XClaim(ctx, args)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XClaimJustID(ctx context.Context, args *XClaimArgs) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XClaimJustID(ctx, args)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XDel(ctx context.Context, val string, vals ...string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XDel(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XGroupCreate(ctx context.Context, val string, val1 string, val2 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XGroupCreate(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XGroupCreateMkStream(ctx context.Context, val string, val1 string, val2 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XGroupCreateMkStream(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XGroupDelConsumer(ctx context.Context, val string, val1 string, val2 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XGroupDelConsumer(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XGroupDestroy(ctx context.Context, val string, val1 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XGroupDestroy(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XGroupSetID(ctx context.Context, val string, val1 string, val2 string) (cmd *StatusCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XGroupSetID(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XInfoGroups(ctx context.Context, val string) (cmd *XInfoGroupsCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XInfoGroups(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XInfoStream(ctx context.Context, val string) (cmd *XInfoStreamCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XInfoStream(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XLen(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XLen(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XPending(ctx context.Context, val string, val1 string) (cmd *XPendingCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XPending(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XPendingExt(ctx context.Context, args *XPendingExtArgs) (cmd *XPendingExtCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XPendingExt(ctx, args)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XRange(ctx context.Context, val string, val1 string, val2 string) (cmd *XMessageSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XRange(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XRangeN(ctx context.Context, val string, val1 string, val2 string, i int64) (cmd *XMessageSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XRangeN(ctx, val, val1, val2, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XRead(ctx context.Context, args *XReadArgs) (cmd *XStreamSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XRead(ctx, args)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XReadGroup(ctx context.Context, args *XReadGroupArgs) (cmd *XStreamSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XReadGroup(ctx, args)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XReadStreams(ctx context.Context, vals ...string) (cmd *XStreamSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XReadStreams(ctx, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XRevRange(ctx context.Context, val string, val1 string, val2 string) (cmd *XMessageSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XRevRange(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XRevRangeN(ctx context.Context, val string, val1 string, val2 string, i int64) (cmd *XMessageSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XRevRangeN(ctx, val, val1, val2, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XTrim(ctx context.Context, val string, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XTrim(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) XTrimApprox(ctx context.Context, val string, i int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().XTrimApprox(ctx, val, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZAdd(ctx context.Context, val string, z ...*Z) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZAdd(ctx, val, z...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZAddCh(ctx context.Context, val string, z ...*Z) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZAddCh(ctx, val, z...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZAddNX(ctx context.Context, val string, z ...*Z) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZAddNX(ctx, val, z...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZAddNXCh(ctx context.Context, val string, z ...*Z) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZAddNXCh(ctx, val, z...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZAddXX(ctx context.Context, val string, z ...*Z) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZAddXX(ctx, val, z...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZAddXXCh(ctx context.Context, val string, z ...*Z) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZAddXXCh(ctx, val, z...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZCard(ctx context.Context, val string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZCard(ctx, val)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZCount(ctx context.Context, val string, val1 string, val2 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZCount(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZIncr(ctx context.Context, val string, z *Z) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZIncr(ctx, val, z)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZIncrBy(ctx context.Context, val string, f float64, val1 string) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZIncrBy(ctx, val, f, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZIncrNX(ctx context.Context, val string, z *Z) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZIncrNX(ctx, val, z)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZIncrXX(ctx context.Context, val string, z *Z) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZIncrXX(ctx, val, z)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZInterStore(ctx context.Context, val string, store *ZStore) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZInterStore(ctx, val, store)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZLexCount(ctx context.Context, val string, val1 string, val2 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZLexCount(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZPopMax(ctx context.Context, val string, vals ...int64) (cmd *ZSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZPopMax(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZPopMin(ctx context.Context, val string, vals ...int64) (cmd *ZSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZPopMin(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRange(ctx context.Context, val string, i int64, i1 int64) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRange(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRangeByLex(ctx context.Context, val string, by *ZRangeBy) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRangeByLex(ctx, val, by)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRangeByScore(ctx context.Context, val string, by *ZRangeBy) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRangeByScore(ctx, val, by)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRangeByScoreWithScores(ctx context.Context, val string, by *ZRangeBy) (cmd *ZSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRangeByScoreWithScores(ctx, val, by)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRangeWithScores(ctx context.Context, val string, i int64, i1 int64) (cmd *ZSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRangeWithScores(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRank(ctx context.Context, val string, val1 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRank(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRem(ctx context.Context, val string, vals ...interface{}) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRem(ctx, val, vals...)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRemRangeByLex(ctx context.Context, val string, val1 string, val2 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRemRangeByLex(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRemRangeByRank(ctx context.Context, val string, i int64, i1 int64) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRemRangeByRank(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRemRangeByScore(ctx context.Context, val string, val1 string, val2 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRemRangeByScore(ctx, val, val1, val2)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRevRange(ctx context.Context, val string, i int64, i1 int64) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRevRange(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRevRangeByLex(ctx context.Context, val string, by *ZRangeBy) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRevRangeByLex(ctx, val, by)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRevRangeByScore(ctx context.Context, val string, by *ZRangeBy) (cmd *StringSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRevRangeByScore(ctx, val, by)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRevRangeByScoreWithScores(ctx context.Context, val string, by *ZRangeBy) (cmd *ZSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRevRangeByScoreWithScores(ctx, val, by)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRevRangeWithScores(ctx context.Context, val string, i int64, i1 int64) (cmd *ZSliceCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRevRangeWithScores(ctx, val, i, i1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZRevRank(ctx context.Context, val string, val1 string) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZRevRank(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZScan(ctx context.Context, val string, n uint64, val1 string, i int64) (cmd *ScanCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZScan(ctx, val, n, val1, i)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZScore(ctx context.Context, val string, val1 string) (cmd *FloatCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZScore(ctx, val, val1)
	c.cmdMetrics(cmd, issuedAt)
	return
}

func (c *Client) ZUnionStore(ctx context.Context, val string, store *ZStore) (cmd *IntCmd) {
	if ctx == nil {
		ctx = context.Background()
	}
	issuedAt := time.Now()
	cmd = c.load().ZUnionStore(ctx, val, store)
	c.cmdMetrics(cmd, issuedAt)
	return
}
